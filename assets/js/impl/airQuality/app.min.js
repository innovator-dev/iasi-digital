/*
 (c) 2018-2025. Iasi Digital [https://iasi.digital]
*/
class Sensor{constructor(a){this.id=a.id||0;this.lastUpdate=a.timelast||null;this.lastUpdateFriendly=CityApp.dateDiff((new Date(1E3*this.lastUpdate)).toISOString(),!0);this.latitude=a.latitude;this.longitude=a.longitude;this.aqi=a.hasOwnProperty("aqi")?a.aqi:0;this.pm1=a.hasOwnProperty("last_pm1")?a.last_pm1:0;this.pm10=a.hasOwnProperty("last_pm10")?a.last_pm10:0;this.pm25=a.hasOwnProperty("last_pm25")?a.last_pm25:0;this.temperature=a.hasOwnProperty("last_temperature")?a.last_temperature:0;this.ch2o=
a.hasOwnProperty("last_ch2o")?a.last_ch2o:0;this.co2=a.hasOwnProperty("last_co2")?a.last_co2:0;this.noise=a.hasOwnProperty("last_noise")?a.last_noise:0;this.humidity=a.hasOwnProperty("last_humidity")?a.last_humidity:0;this.o3=a.hasOwnProperty("last_o3")?a.last_o3:0;this.voc=a.hasOwnProperty("last_voc")?a.last_voc:0;this.avgPm1=a.hasOwnProperty("avg_pm1")?a.avg_pm1:0;this.avgPm10=a.hasOwnProperty("avg_pm10")?a.avg_pm10:0;this.avgPm25=a.hasOwnProperty("avg_pm25")?a.avg_pm25:0;this.avgTemperature=a.hasOwnProperty("avg_temperature")?
a.avg_temperature:0;this.avgCh2o=a.hasOwnProperty("avg_ch2o")?a.avg_ch2o:0;this.avgCo2=a.hasOwnProperty("avg_co2")?a.avg_co2:0;this.avgNoise=a.hasOwnProperty("avg_noise")?a.avg_noise:0;this.avgHumidity=a.hasOwnProperty("avg_humidity")?a.avg_humidity:0;this.avgO3=a.hasOwnProperty("avg_o3")?a.avg_o3:0;this.avgVoc=a.hasOwnProperty("avg_voc")?a.avg_voc:0}static getAQI(a){return 0<=a&&12>=a?{color:"#00e400",heading:CityApp.config.messages["airQuality.title.healthy"],description:CityApp.config.messages["airQuality.message.healthy"],
aqi:"0 - 12",css:"good"}:12<a&&35>=a?{color:"#ffff00",heading:CityApp.config.messages["airQuality.title.moderate"],description:CityApp.config.messages["airQuality.message.moderate"],aqi:"12 - 35",css:"moderate"}:35<a&&55>=a?{color:"#ff7d00",heading:CityApp.config.messages["airQuality.title.sensitive"],description:CityApp.config.messages["airQuality.message.sensitive"],aqi:"35 - 55",css:"unhealthy-sensitive"}:55<a&&150>=a?{color:"#fe0000",heading:CityApp.config.messages["airQuality.title.unhealthy"],
description:CityApp.config.messages["airQuality.message.unhealthy"],aqi:"55 - 150",css:"unhealthy"}:150<a&&250>=a?{color:"#99004c",heading:CityApp.config.messages["airQuality.title.veryUnhealthy"],description:CityApp.config.messages["airQuality.message.veryUnhealthy"],aqi:"150 - 250",css:"very-unhealthy"}:250<a&&500>=a?{color:"#7e0022",heading:CityApp.config.messages["airQuality.title.hazardous"],description:CityApp.config.messages["airQuality.message.hazardous"],aqi:"250 - 500",css:"hazardous"}:
{color:"transparent",heading:"",description:"",aqi:"",css:""}}}
class AirQuality extends DataSet{constructor(){super();this.dataSet="86a2-616b-497a-b2fb-1a71";this.aqiScale={pm25:[0,12,35.5,55.5,150.5,250.5,350.5,500.5],pm10:[0,55,155,255,355,425,505,605]};this.aqiRange={pm25:[0,50,100,150,200,300,400,500],pm10:[0,50,100,150,200,300,400,500]};this.selectedMarker=null}init(){this.setWatcher(3E5,()=>{this.getData()})}getData(a=null){return AirQuality.fetch(this.dataSet,c=>{this.data=c;a&&a()})}render(a){this.hasData()?this.data.forEach(c=>{const b=new Sensor(c);
if(b.latitude&&b.longitude&&1440>b.lastUpdateFriendly&&"Iasi"===c.city){const d=Sensor.getAQI(b.avgPm25);this.markers[b.id]?(!this.markers[b.id].isVisible&&this.markers[b.id]._ref&&(this.markers[b.id]._ref.setMap(CityApp.data.map._ref),this.markers[b.id].isVisible=!0),this.markers[b.id]._ref.setCenter(new google.maps.LatLng(b.latitude,b.longitude))):(this.markers[b.id]={id:b.id,_ref:new google.maps.Circle({strokeColor:d.color,strokeOpacity:.3,strokeWeight:1,fillColor:d.color,fillOpacity:.4,map:CityApp.data.map._ref,
center:{lat:parseFloat(b.latitude),lng:parseFloat(b.longitude)},radius:150}),isVisible:!0},this.markers[b.id]._ref.addListener("click",()=>{this.selectedMarker=this.markers[b.id]._ref;CityApp.mapUtils("closePopup");CityApp.mapUtils("createPopup",{title:d.heading,titleLabel:b.avgPm25,titleLabelClass:["aqi",`aqi-${d.css}`],content:`<p>${d.description}</p><h6>${CityApp.config.labels["airQuality.sensorValues"]}</h6><ul><li>${CityApp.config.labels["airQuality.pm1"]}: ${b.avgPm1} \u00b5g/m\u00b3</li><li>${CityApp.config.labels["airQuality.pm25"]}: ${b.avgPm25} \u00b5g/m\u00b3</li><li>${CityApp.config.labels["airQuality.pm10"]}: ${b.avgPm10} \u00b5g/m\u00b3</li><li>${CityApp.config.labels["airQuality.temperature"]}: ${b.avgTemperature}<span data-icon="&#xe00c;"></span></li></ul><h6>${CityApp.config.labels["airQuality.lastUpdate"]}</h6><p>${(new Date(1E3*
b.lastUpdate)).toLocaleString("ro-RO",{weekday:"short",year:"numeric",month:"short",day:"numeric",hour:"numeric",minute:"numeric"})}</p>`,position:this.markers[b.id]._ref.getCenter(),onClick:()=>{this.selectedMarker=null}});CityApp.mapUtils("openPopup",{ref:this.markers[b.id]._ref})}))}}):this.getData(()=>{this.render()})}show(a=null){this.hasData()?(this.render(),this.isVisible=!0):this.getData(()=>{setTimeout(()=>{this.show()},1E3)});a&&a()}hide(a=null){Object.values(this.markers).forEach(c=>{c._ref&&
(c._ref.setMap(null),c.isVisible=!1)});this.isVisible=!1;this.clearWatcher();a&&a()}}(()=>{CityApp.data.sets.airQuality=new AirQuality})();
